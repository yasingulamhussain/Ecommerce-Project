{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\n\nconst addCartItem = (cartItems, productToAdd) => {\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === productToAdd.id);\n\n  if (existingCartItem) {\n    return cartItems.map(cartItem => cartItem.id === productToAdd.id ? { ...cartItem,\n      quantity: cartItem.quantity + 1\n    } : cartItem);\n  }\n\n  return [...cartItems, { ...productToAdd,\n    quantity: 1\n  }];\n};\n\nconst removeCartItem = (cartItems, cartItemToRemove) => {\n  // find the cart item to remove\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === cartItemToRemove.id); // check if quantity is equal to 1, if it is remove that item from the cart\n\n  if (existingCartItem.quantity === 1) {\n    return cartItems.filter(cartItem => cartItem.id !== cartItemToRemove.id);\n  } // return back cartitems with matching cart item with reduced quantity\n\n\n  return cartItems.map(cartItem => cartItem.id === cartItemToRemove.id ? { ...cartItem,\n    quantity: cartItem.quantity - 1\n  } : cartItem);\n};\n\nconst clearCartItem = (cartItems, cartItemToClear) => cartItems.filter(cartItem => cartItem.id !== cartItemToClear.id);\n\nconst CART_INITIAL_STATE = {\n  isCartOpen: false,\n  cartItems: []\n};\nexport const cartSlice = createSlice({\n  name: 'cart',\n  initialState: CART_INITIAL_STATE,\n  reducers: {\n    setIsCartOpen(state, action) {\n      state.isCartOpen = action.payload;\n    },\n\n    addItemToCart(state, action) {\n      state.cartItems = addCartItem(state.cartItems, action.payload);\n    },\n\n    removeItemFromCart(state, action) {\n      state.cartItems = removeCartItem(state.cartItems, action.payload);\n    },\n\n    clearItemFromCart(state, action) {\n      state.cartItems = clearCartItem(state.cartItems, action.payload);\n    }\n\n  }\n});\nexport const {\n  setIsCartOpen,\n  addItemToCart,\n  removeItemFromCart,\n  clearItemFromCart\n} = cartSlice.actions;\nexport const cartReducer = cartSlice.reducer;","map":{"version":3,"sources":["/Users/Yasin.Gulamhussain.Admin/Ecommerce-Project/src/store/cart/cart.reducer.js"],"names":["createSlice","addCartItem","cartItems","productToAdd","existingCartItem","find","cartItem","id","map","quantity","removeCartItem","cartItemToRemove","filter","clearCartItem","cartItemToClear","CART_INITIAL_STATE","isCartOpen","cartSlice","name","initialState","reducers","setIsCartOpen","state","action","payload","addItemToCart","removeItemFromCart","clearItemFromCart","actions","cartReducer","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst addCartItem = (cartItems, productToAdd) => {\n  const existingCartItem = cartItems.find(\n    (cartItem) => cartItem.id === productToAdd.id\n  );\n\n  if (existingCartItem) {\n    return cartItems.map((cartItem) =>\n      cartItem.id === productToAdd.id\n        ? { ...cartItem, quantity: cartItem.quantity + 1 }\n        : cartItem\n    );\n  }\n\n  return [...cartItems, { ...productToAdd, quantity: 1 }];\n};\n\nconst removeCartItem = (cartItems, cartItemToRemove) => {\n  // find the cart item to remove\n  const existingCartItem = cartItems.find(\n    (cartItem) => cartItem.id === cartItemToRemove.id\n  );\n\n  // check if quantity is equal to 1, if it is remove that item from the cart\n  if (existingCartItem.quantity === 1) {\n    return cartItems.filter((cartItem) => cartItem.id !== cartItemToRemove.id);\n  }\n\n  // return back cartitems with matching cart item with reduced quantity\n  return cartItems.map((cartItem) =>\n    cartItem.id === cartItemToRemove.id\n      ? { ...cartItem, quantity: cartItem.quantity - 1 }\n      : cartItem\n  );\n};\n\nconst clearCartItem = (cartItems, cartItemToClear) =>\n  cartItems.filter((cartItem) => cartItem.id !== cartItemToClear.id);\n\nconst CART_INITIAL_STATE = {\n  isCartOpen: false,\n  cartItems: [],\n};\n\nexport const cartSlice = createSlice({\n  name: 'cart',\n  initialState: CART_INITIAL_STATE,\n  reducers: {\n    setIsCartOpen(state, action) {\n      state.isCartOpen = action.payload;\n    },\n    addItemToCart(state, action) {\n      state.cartItems = addCartItem(state.cartItems, action.payload);\n    },\n    removeItemFromCart(state, action) {\n      state.cartItems = removeCartItem(state.cartItems, action.payload);\n    },\n    clearItemFromCart(state, action) {\n      state.cartItems = clearCartItem(state.cartItems, action.payload);\n    },\n  },\n});\n\nexport const {\n  setIsCartOpen,\n  addItemToCart,\n  removeItemFromCart,\n  clearItemFromCart,\n} = cartSlice.actions;\n\nexport const cartReducer = cartSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}